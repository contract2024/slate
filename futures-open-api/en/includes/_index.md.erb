
# update record

2024.04.15 Update API style


# Basic Information

## API Basic Information

- baseurl : **htts://futuresopenapi.xxx.xxx**
- All endpoints return either a JSON object or array.
- Data is returned in Reverse order. newest first, oldest last.
- All time and timestamp related fields are in milliseconds.

## HTTP Error Codes

- HTTP `4XX` return codes are used for malformed requests; the issue is on the sender's side.
- HTTP `429` return code is used when breaking a request rate limit.
- HTTP `418` eturn code is used when an IP has been auto-banned for continuing to send requests after receiving `429`codes.
- HTTP `5XX` return codes are used for internal errors
- HTTP `504` return code is used when the API successfully sent the message but not get a response within the timeout period. It is important to NOT treat this as a failure operation; the execution status is UNKNOWN and could have been a success.

>{
"code": -1121,
"msg": "Invalid symbol."
}

## General Information
- All requests are based on the Https protocol, and the`Content-Type`n the request header information needs to be uniformly set to: 'application/json'
- For the interface of the`GET` method, the parameters must be sent in the`query string`.
- The interface of the`POST` method, the parameters must be sent in the`request body`.
- Parameters may be sent in any order.

## LIMITS
- There will be a limited frequency description below each interface..
- A 429 will be returned when either rate limit is violated.
- A 429 will be returned when either rate limit is violated.

## Endpoint Security Type
- Each endpoint has a security type that determines the how you will interact with it.
- API-keys are passed into the Rest API via the X-CH-APIKEY header.
- API-keys and secret-keys are case sensitive.

| Security Type | Description             |
|-------------|----------------|
| NONE        | Endpoint can be accessed freely.   |
| TRADE       | Endpoint requires sending a valid API-Key and signature. |
| USER_DATA   | Endpoint requires sending a valid API-Key and signature. |
| USER_STREAM | Endpoint requires sending a valid API-Key.  |
| MARKET_DATA | Endpoint requires sending a valid API-Key.   |

## SIGNED (TRADE and USER_DATA) endpoint security
- When calling the`TRADE`or`USER_DATA`interface, the signature parameter should be passed in the X-CH-SIGN field in the HTTP header.
- The signature uses the `HMAC SHA256`algorithm. API-KEY the API-Secret corresponding to the API-KEY is used as the `HMAC SHA256` key.
- The request header of `X-CH-SIGN` is based on `timestamp` + `method` + `requestPath` + `body string`  (+ means string connection) as the operation object
- The value of timestamp is the same as the `X-CH-TS` request header, method is the request method, and the letters are all uppercase: `GET/POST`
- `requestPath` is the request interface path For example: ``/sapi/v1/order`
- `body` is the string of the request body (post only)
- The signature is not case sensitive.

## Timing Security
- The signature interface needs to pass the timestamp in the `X-CH-TS` field in the `HTTP header`, and its value should be the unix timestamp of the request sending time `e.g. 1528394129373`
- An additional parameter, `recvWindow`, may be sent to specify the number of milliseconds after `timestamp` the request is valid for. If `recvWindow` is not sent, it defaults to 5000.
- In addition, if the server calculates that the client's timestamp is more than one second ‘in the future’ of the server’s time, it will also reject the request.
- The logic is as follows：

```javascript
if (timestamp < (serverTime + 1000) && (serverTime - timestamp) <= recvWindow) {
  // process request
} else {
  // reject request
}
```

**Serious trading is about timing** Networks can be unstable and unreliable, which can lead to requests taking varying amounts of time to reach the servers. With recvWindow, you can specify that the request must be processed within a certain number of milliseconds or be rejected by the server.
**It recommended to use a small recvWindow of 5000 or less!**


## SIGNED Endpoint Examples for POST /sapi/v1/order
Here is a step-by-step example of how to send a vaild signed payload from the Linux command line using `echo`, `openssl`, and `curl`.

| key       | value                            |
|-----------|----------------------------------|
| apikey    | vmPUZE6mv9SD5V5e14y7Ju91duEh8A   |
| secretKey | 902ae3cb34ecee2779aa4d3e1d226686 |

| Parameter     | Value      |
|--------|---------|
| symbol | BTCUSDT |
| side   | BUY     |
| type   | LIMIT   |
| volume | 1       |
| price  | 9300    |

## Signature example

- body
> {"symbol":"BTCUSDT","price":"9300","volume":"1","side":"BUY","type":"LIMIT"}

```shell
HMAC SHA256 Sign:
[linux]$ echo -n "1588591856950POST/sapi/v1/order/test{\"symbol\":\"BTCUSDT\",\"price\":\"9300\",\"volume\":\"1\",\"side\":\"BUY\",\"type\":\"LIMIT\"}" | openssl dgst -sha256 -hmac "902ae3cb34ecee2779aa4d3e1d226686"
(stdin)= c50d0a74bb9427a9a03933d0eded03af9bf50115dc5b706882a4fcf07a26b761
```

```shell
curl :
(HMAC SHA256)
  [linux]$ curl -H "X-CH-APIKEY: c3b165fd5218cdd2c2874c65da468b1e" -H "X-CH-SIGN: c50d0a74bb9427a9a03933d0eded03af9bf50115dc5b706882a4fcf07a26b761" -H "X-CH-TS: 1588591856950" -H "Content-Type:application/json" -X POST 'http://localhost:30000/sapi/v1/order/test' -d '{"symbol":"BTCUSDT","price":"9300","quantity":"1","side":"BUY","type":"LIMIT"}'
```

## Enum Type
### Terminology
- `base asset` refers to the asset that is the `quantity` of a symbol.
- `quote asset` refers to the asset that is the `price` of a symbol.

### Order status:
- `NEW ORDER` ]
- `PARTIALLY_FILLED`
- `FILLED`
- `CANCELED`
- `PENDING_CANCEL`
- `REJECTED`

### Order types:
- `LIMIT`
- `MARKET`

### Order side:
- `BUY`
- `SELL`

### Kline/Candlestick Interval:
m -> minutes; h -> hours; day -> days; week -> weeks; month -> months
- `1min`
- `5min`
- `15min`
- `30min`
- `60min`
- `1h`
- `4h`
- `1day`
- `1week`
- `1month`

# Market

## Security:`None`
Public section can be accessed freely without requiring any API-key or signatures.

## Test Connectivity

`GET` `https://futuresopenapi.xxx.com/fapi/v1/ping`

** This interface checks connectivity to the host**

Parameter: `NONE`

> Response:

```json
{}
```

## Check Server Time
`GET` `https://futuresopenapi.xxx.com/fapi/v1/time`

**Check Server Time**

Parameter: `NONE`

> Response:


```json
{
  "serverTime":1607702400000, //Server timestamp
  "timezone":"China Standard Time" //Server time zone
}
```

## Contracts List
`GET` `https://futuresopenapi.xxx.com/fapi/v1/contracts`

**Contracts List**

Parameter: `NONE`

> Response:

```json
[
    {
        "symbol": "H-HT-USDT", // Uppercase contract Name
        "pricePrecision": 8, // Price accuracy
        "side": 1, // Contract status (0: not tradable, 1: tradable)
        "maxMarketVolume": 100000, // Maximum order quantity for market orders
        "multiplier": 6, // Contract value
        "minOrderVolume": 1, // Minimum order quantity
        "maxMarketMoney": 10000000, //Maximum order amount at market price
        "type": "H", // Contract type (E: Perpetual contract, S: Simulated contract, others are mixed contracts)
        "maxLimitVolume": 1000000, // Maximum order quantity for limit orders
        "maxValidOrder": 20, // The maximum number of valid orders
        "multiplierCoin": "HT", // multiplier coin
        "minOrderMoney": 0.001, // Minimum order amount
        "maxLimitMoney": 1000000, //Limit price maximum order amount
        "status": 1 //Contract status (0: not tradable, 1: tradable)
    }
]
```

## Depth

`GET` `https://futuresopenapi.xxx.com/fapi/v1/depth`

#### Parameter
| Name           | Type      | Description                |
|--------------|---------|-------------------|
| limit        | Integer | Default 100; Maximum 100       |
| contractName | String  | Uppercase contract Name E.g. E-BTC-USDT |

> Response:

```json
{
  "bids": [
    [
      "3.90000000",   // Price
      "431.00000000"  // Volume
    ],
    [
      "4.00000000",
      "431.00000000"
    ]
  ],
  "asks": [
    [
      "4.00000200",  // Price
      "12.00000000"  // Volume
    ],
    [
      "5.10000000",
      "28.00000000"
    ]
  ]
}
```
### 24hrs ticker
`GET` `https://futuersopenapi.xxx.com/fapi/v1/ticker`

24hrs ticker

#### Parameter
| Name           | Type      | Description                |
|--------------|---------|-------------------|
| contractName | String  |Uppercase contract name E.g. E-BTC-USDT |

> Response:

```json
{
    "high": "9279.0301", //Highest price
    "vol": "1302", //Trade volume
    "last": "9200", //The last price
    "low": "9279.0301", //Lowest price
    "buy": 2100, //The price in the buying book order at the first one
    "sell": 0,//The price in the selling book order at the first one
    "rose": "0", // Range of increase and decrease, + is increase, - is decrease, +0.05 means increase by 5%
    "time": 1595563624731 // Timestamp
}
```
### Obtain index/tag price
`GET` `https://futuersopenapi.xxx.com/fapi/v1/index`

#### Parameter
| Name           | Type      | Description                |
|--------------|---------|-------------------|
| limit        | Integer | Default 100; Maximum 1000       |
| contractName | String  | Uppercase contract name E.g. E-BTC-USDT |

> Response:

```json
{
    "tagPrice": 581.5, //Tag price
    "indexPrice": 646.393, // Index price
    "currentFundRate": 0.001, // Funding rate price for the previous period (used for settlement in this period)
    "nextFundRate": "E-ETH-USDT" //Funding rate price
}
```

### Kline/candlestick data
`GET` `https://futuresopenapi.xxx.com/fapi/v1/klines`

#### Parameter
| Name           | Type      | Must | Description                                                                                             |
|--------------|---------|------|------------------------------------------------------------------------------------------------|
| contractName | string  | yes    | Uppercase contract name E.g. E-BTC-USDT                                                                            |
| interval     | string  | yes    | Interval of the Kline. Possible values include:  1min,5min,15min,30min,1h,1day,1week,1month） |
| limit        | integer | no    | Default 100; Maximum 300                                                                                  |
> Response:

```json
[
    {
        "high": "6228.77",//Highest price
        "vol": "111",//Trad volume
        "low": "6228.77",//Lowest price
        "idx": 1594640340,//Open time (timestamp,ms)
        "close": "6228.77",//Close price
        "open": "6228.77"//Open price
    },
    {
        "high": "6228.77",
        "vol": "222",
        "low": "6228.77",
        "idx": 1587632160,
        "close": "6228.77",
        "open": "6228.77"
    },
    {
        "high": "6228.77",
        "vol": "333",
        "low": "6228.77",
        "idx": 1587632100,
        "close": "6228.77",
        "open": "6228.77"
    }
]
```
# Trade
## Security: TRADE
The interface in Trade requires API-key and signature for access.

## Create new order
`GET` `https://futuresopenapi.xxx.com/fapi/v1/order`
#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter

| Name            | Type     | Must | Description                          |
|---------------|--------|------|-----------------------------|
| volume        | number | yes    | The number of orders placed has a precision limit. The precision is set by the administrator. When opening a position at market price, the unit here is value. |
| price         | number | no    | Order price. This field is required for limit orders. There is a precision limit. The precision is set by the administrator.  |
| contractName  | string | yes    | Uppercase contract name E.g.`E-BTC-USDT`         |
| type          | string | yes    | Order type :`LIMIT/MARKET`         |
| side          | string | yes    | Order side`BUY/SELL`              |
| open          | string | yes    | Position side`OPEN/CLOSE`           |
| positionType  | number | no    | Position type:`1:Cross Margin/2:Isolated Margin`            |
| clientOrderId | string | no    | Client order ID, a string less than 32 characters in length              |
| timeInForce   | string | no    | `IOC,FOK,POST_ONLY`         |

> Response:

```json
{
    "orderId": 256609229205684228//Order ID
}
```
## condition Order

`POST` `https://futuresopenapi.xxx.com/fapi/v1/conditionOrder/`
#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter

| Name            | Type     | Must | Description                          |
|---------------|--------|------|-----------------------------|
| triggerType   | string | yes    | Type of condition:`1:stop loss/2:take profit/3:chase the rise/4:kill the fall` |
| triggerPrice  | string | yes    | Trigger price                         |
| volume        | number | yes    | The order quantity. When opening a position at market price, the unit here is value. There is a precision limit. The precision is set by the administrator. |
| price         | number | no    | The order price has precision limits, and the precision is set by the administrator.  |
| contractName  | string | yes    | Uppercase contract name E.g. :`E-BTC-USDT`         |
| type          | string | yes    | Order type:`LIMIT/MARKET`         |
| side          | string | yes    | Order side:`BUY/SELL`              |
| open          | string | yes    | Position side:`OPEN/CLOSE`           |
| positionType  | number | no    | Position type: 1.Cross Margin/2.Isolated Margin           |
| clientOrderId | string | no    | Client order identification, a string less than 32 characters in length             |

> Response:

```json
{
    "code": "0",
    "msg": "Success",
    "data": {
        "triggerIds": [
            "1322738336974712847"// trigger order id
        ],
        "ids": [],
        "cancelIds": []
    },
    "succ": true
}
```
## Cancel order
`POST` `https://futuresopenapi.xxx.com/fapi/v1/cancel`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name           | Type     | Must | Description                  |
|--------------|--------|------|---------------------|
| contractName | string | yes    | Uppercase contract name E.g. `E-BTC-USDT` |
| orderId      | string | yes    | Order ID                |

> Response:

```json
{
    "orderId": 256609229205684228//Order ID
}
```
## Order Information
`GET` `https://futuresopenapi.xxx.com/fapi/v1/order`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name            | Type     | Must | Description                  |
|---------------|--------|------|---------------------|
| contractName  | string | yes    | Uppercase contract name E.g. `E-BTC-USDT` |
| orderId       | string | yes    | Order ID                |
| clientOrderId | string | no    | Client unique identifier, default is 0             |

> Response:

```json
{
    "side": "BUY",//Order direction: BUY (buy long) and SELL (sell short)
    "executedQty": 0,//Deal volume
    "orderId": 2006628907041292645,//Order ID (system generated)
    "price": 2000.0000000000000000,//Commission price
    "origQty": 2.0000000000000000,//Commission volume
    "avgPrice": 0E-8,//Deal average price
    "transactTime": 1704967622000,//Order creation time
    "action": "OPEN",//OPEN/CLOSE
    "contractName": "E-BTC-USDT",//Uppercase contract name
    "type": "LIMIT",//Order type:LIMIT/MARKET
    "timeInForce": "",//Effective method of conditional order : 1 limit， 2 market，3 IOC，4 FOK，5 POST_ONLY
    "status": "NEW"//Order Status. Possible values are: NEW (new order, no transaction), PARTIALLY_FILLED (partial transaction), FILLED (all transactions), CANCELED (cancelled) and REJECTED (order rejected)
}
```
##  Current order information
`GET` `https://futuresopenapi.xxx.com/fapi/v1/openOrders`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name            | Type     | Must | Description                  |
|---------------|--------|------|---------------------|
| contractName  | string | yes    | Uppercase contract name E.g. `E-BTC-USDT` |

> Response:

```json
[
    {
       "side": "BUY",//Order side:BUY/SELL
       "executedQty": 0,//The number of already deal order
       "orderId": 259396989397942275,//Order ID (system generated)
       "price": 10000.0000000000000000,//Order price
       "origQty": 1.0000000000000000,//Order volume
       "avgPrice": 0E-8,//The average price of already deal order
       "transactTime": "1607702400000",//Order creation time
       "action": "OPEN",//CLOSE/BUY
       "contractName": "E-BTC-USDT",//Order ID (system generated)
       "type": "LIMIT",//Order type:LIMIT/MARKET
       "status": "INIT"//Order Status. Possible values are: NEW (new order, no transaction), PARTIALLY_FILLED (partial transaction), FILLED (all transactions), CANCELED (cancelled) and REJECTED (order rejected)
    }
]
```
## Historical commission records
`GET` `https://futuresopenapi.xxx.com/fapi/v1/orderHistorical`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name           | Type     | Must | Description                  |
|--------------|--------|------|---------------------|
| contractName | string | yes    | Uppercase contract name E.g.  `E-BTC-USDT` |
| limit        | string | yes    | Default 100; Maximum 1000 |
| fromId       | long   | no    | Start searching from this record           |

> Response:

```json
[
  {
    "side":"BUY", //Order direction
    "clientId":”0”,//Merchant unique identifier
    "ctimeMs":1632903411000,//Create Timestamp
    "positionType":2,//Position Type,1:Cross/2:Isolated
    "orderId":777293886968070157,//Order ID
    "avgPrice":41000,//Average trading price
    "openOrClose":"OPEN",//OPEN/CLOSE
    "leverageLevel":26,//Leverage
    "type":4, //Order Type
    "closeTakerFeeRate":0.00065,//taker closing fee rate
    "volume":2,//Order ignored
    "openMakerFeeRate":0.00025,//maker opening fee rate
    "dealVolume":1,//Trading quantity
    "price":41000,//Order price
    "closeMakerFeeRate":0.00025,//Platform maker fee rate
    "contractId":1,//Contract ID
    "ctime":"2021-09-29T16:16:51",//Order creation time
    "contractName":"E-BTC-USDT",//Contract name
    "openTakerFeeRate":0.00065,//taker opening fee rate
    "dealMoney":4.1,//Trading value
    "status":4 //Order status
  }
]
```
## Profit and loss record
`GET` `https://futuresopenapi.xxx.com/fapi/v1/profitHistorical`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name           | Type     | Must | Description                  |
|--------------|--------|------|---------------------|
| contractName | string | yes    | Uppercase contract name E.g. `E-BTC-USDT` |
| limit        | string | yes    | Default 100; Maximum 1000 |
| fromId       | long   | no    | Start searching from this record           |

> Response:

```json
[
  {
    "side":"SELL",//Position direction
    "positionType"":2,//Position Type,1:Cross/2:Isolated
    "tradeFee":-5.23575,//Handling fee
    "realizedAmount":0,//Deprecated
    "leverageLevel":26,//Leverage
    "openPrice":44500,//Opening price
    "settleProfit":0,//Realized PNL
    "mtime":1632882739000,//Update time
    "shareAmount":0,//Share amount
    "openEndPrice":44500,//Average opening price
    "closeProfit":-45,//Closing PNL
    "volume":900,//Position quantity
    "contractId":1,//Contract ID
    "historyRealizedAmount":-50.23575,//Historical realized PNL        "ctime":1632882691000,//Create Timestamp
    "id":8764,//Position ID
    "capitalFee":0 //Funding fee
  }
]
```

## Transaction Record
`GET` `https://futuresopenapi.xxx.com/fapi/v1/myTrades`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name           | Type     | Must | Description                  |
|--------------|--------|------|---------------------|
| contractName | string | yes    | Uppercase contract name E.g. `E-BTC-USDT` |
| limit        | string | yes    | Default 100; Maximum 1000 |
| fromId       | long   | no    | Default 100; Maximum 1000           |

> Response:

```json
[
  {
          "amount": 1.00000000000000000000000000000000, //Deal amount
          "side": "BUY", //Order side:  BUY/SELL
          "fee": "0.00025", //Trading fee
          "isMaker": true, //Maker Or Taker: True : Maker,False: Taker
          "isBuyer": true, //Whether is buyer: true: buyer，false: seller
          "bidId": 1874564572563538059, //Buy side order ID
          "bidUserId": 10034, // Buy side user ID
          "price": 10.0000000000000000,//Deal price
          "qty": 10,//Deal volume
          "askId": 1954072405852309104,//Sell side user ID
          "contractName": "E-ETH-USDT", //Uppercase contract name
          "time": 1701419186000, // Trade timestamp
          "tradeId": 1527, //Trade ID
          "askUserId": 10378// Sell side user ID
      }
]
```

## Change position mode
`POST` `https://futuresopenapi.xxx.com/fapi/v1/edit_user_position_model`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name           | Type     | Must | Description                  |
|--------------|--------|------|---------------------|
| contractName | string | yes    | Uppercase contract name E.g.  `E-BTC-USDT` |
| positionModel| integer | yes   | The model of position(1.Net position 2. Two-way position) Input 1 or 2 |

> Response:

```json
{
    "code": "0",
    "msg": "Successful",
    "data": null
}
```

## Change margin mode
`POST` `https://futuresopenapi.xxx.com/fapi/v1/edit_user_margin_model`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name            | Type     | Must | Description                  |
|---------------|--------|------|---------------------|
| contractName  | string | yes    | Uppercase contract name E.g.  `E-BTC-USDT` |
| marginModel   | integer | yes   | Margin mode (1. Cross position 2. Isolated position) input 1 or 2 |

> Response:

```json
{
    "code": "0",
    "msg": "Successful",
    "data": null
}
```

## Change leverage
`POST` `https://futuresopenapi.xxx.com/fapi/v1/edit_lever`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name            | Type     | Must | Description                  |
|---------------|--------|------|---------------------|
| contractName  | string | yes    | Uppercase contract name E.g. `E-BTC-USDT` |
| nowLevel   | integer | yes   | Leverage multiple to be modified E.g. 50       |

> Response:

```json
{
    "code": "0",
    "msg": "Successful",
    "data": null
}
```

## Obtain the current trigger order
`POST` `https://futuresopenapi.xxx.com/fapi/v1/trigger_order_list`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name           | Type     | Must | Description                  |
|--------------|--------|------|---------------------|
| contractName | string | yes    | Uppercase contract name E.g.  `E-BTC-USDT` |
| page         | integer | no    | Current page number, Default 1      |
| limit     | integer | no     | Total data per page, Default 1000      |

>200

```json
{
  "code":"0",
  "msg":"Successful",
  "data":{
    "count":2,
    "trigOrderList":[
      {
        "mtime":1706513208000, //Modify time
        "price":0, //Order price
        "ctime":1706513208000,//Create time
        "contractName":"BTCUSDT",//Contract name
        "id":"895",//Trigger order collection table id
        "triggerOrderId":"1322738336974712829",// Trigger order id
        "pricePrecision":3, //Price accuracy
        "side":"BUY", //Order side (BUY/SELL)
        "triggerPrice":11111, //Trigger price
        "multiplier":0.0001, //Contract value
        "marginCoin":"USDT",//Margin currency
        "volume":100,//Order volume
        "expireTime":1707722808000,//Order expiration time
        "contractId":127,//Contract id
        "triggerType":4,//Trigger order type : 1 stop loss，2 take profit，3 stop loss limit，4 take profit limit
        "open":"OPEN",//Direction of opening and closing positions (OPEN/CLOSE)
        "status":0 //Valid status 0 valid 1 invalid
      }
    ]
  }
}
```

## Cancel trigger order
`POST` `https://futuresopenapi.xxx.com/fapi/v1/trigger_order_cancel`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

#### Parameter
| Name           | Type     | Must | Description                  |
|--------------|--------|------|---------------------|
| contractName | string | yes    | Uppercase contract name E.g.  `E-BTC-USDT` |
| orderId      | long | no    | 1322738336974712828      |

>200

```json
{
    "code": "0",
    "msg": "Successful",
    "data": null
}
```

# Account
##Security: USER_DATA
The interface in Trade requires API-key and signature for access.

## Account Information
`GET` `https://futuresopenapi.xxx.com/fapi/v1/account`

#### Headers

| Name          | Type     | Must | Description        |
|-------------|--------|------|-----------|
| X-CH-TS     | string | yes    | Timestamp       |
| X-CH-APIKEY | string | yes    | User API-KEY |
| X-CH-SIGN   | string | yes    | Sign        |

>Response:

```json
{
    "account": [ //Collection of balance
        {
            "marginCoin": "USDT", //Margin currency
            "accountNormal": 999.5606, //Account balance
            "accountLock": 23799.5017, //Margin frozen account
            "partPositionNormal": 9110.7294, //Isolated margin balance
            "totalPositionNormal": 0, //Initial margin occupied by full position
            "achievedAmount": 4156.5072, //Realized profit and loss
            "unrealizedAmount": 650.6385, //Unrealized profit or loss
            "totalMarginRate": 0,//Cross Margin Rate
            "totalEquity": 99964804.560,//Cross Margin Interest
            "partEquity": 13917.8753,//Isolated interest
            "totalCost": 0,//Cost of occupying the entire warehouse
            "sumMarginRate": 873.4608,//Margin rate for all accounts
            "positionVos": [ //Position contract records
                {
                    "contractId": 1, //Contract id
                    "contractName": "E-BTC-USDT", //Uppercase contract name
                    "contractOtherName": "E-BTC-USDT", //Currency alias
                    "contractSymbol": "BTC-USDT", //Contract currency pair
                    "positions": [
                        {
                            "id": 13603, //Position id
                            "uid": 10023, //User ID
                            "contractId": 1, //Contract ID
                            "positionType": 2, // Position type (1: Cross position, 2: isolated position)
                            "side": "BUY", //Position side (BUY: long position, SELL: short position)
                            "volume": 69642.0,//Position quantity
                            "openPrice": 11840.2394,//Opening price
                            "avgPrice": 11840.3095,//Average position price
                            "closePrice": 12155.3005,//Average closing price
                            "leverageLevel": 24,//Leverage multiple
                            "openAmount": 24,//Opening margin
                            "holdAmount": 7014.2111,//Position margin
                            "closeVolume": 40502.0,//Quantity of positions closed
                            "pendingCloseVolume": 0,//The volume of place closing orders
                            "realizedAmount": 8115.9125,//Realized profit and loss
                            "historyRealizedAmount": 1865.3985,//Historical accumulated profit and loss
                            "tradeFee": -432.0072,//Transaction Fees
                            "capitalFee": 2891.2281,//Funding charges
                            "closeProfit": 8117.6903,//Position closing profit and loss
                            "shareAmount": 0.1112,//Sharing amount
                            "freezeLock": 0,//Position frozen status (0: normal, 1: liquidation frozen, 2: delivery frozen)
                            "status": 1,//Position validity (0: invalid, 1: valid)
                            "ctime": "2020-12-11T17:42:10", //Creation time
                            "mtime": "2020-12-18T20:35:43",//Update time
                            "brokerId": 21,//Broker id
                            "lockTime": 2023-12-05T13:53:04,//Liquidation lock time
                            "marginRate": 0.2097,//margin rate
                            "reducePrice": 9740.8083,//Forced price reduction
                            "returnRate": 0.3086,//rate of return (yield)
                            "unRealizedAmount": 2164.5289,//unrealized profit or loss
                            "openRealizedAmount": 2165.0173,//Unrealized profit and loss on opening a position
                            "positionBalance": 82458.2839,//Position value
                            "settleProfit": 0.4883,//Position settlement
                            "indexPrice": 12151.1175,//Latest tag price
                            "keepRate": 0.005,//Tiered Minimum Maintenance Margin Rate
                            "maxFeeRate": //0.0025//Maximum handling fee for closing the position
                        }
                    ]
                }
            ]
        }
    ]
}
```

# Websocket
## General
`WebSocket`is a new HTML5 Protocol. It achieves full-duplex data transmission between the client and the server, allowing data to be transferred effectively in both directions. With just only one handshake, the connection between the client and the server is established. The server will then be able to push data to the client according to preset rules. Its advantages include:

- The WebSocket request header for data transmission between client and server is approximately 2 bytes only
- Either the client or server can initiate a data transmission
- As there is no need to create and delete TCP connection repeatedly, it saves resources for both bandwidth and server

**We strongly recommend developers to use WebSocket API to retrieve market data and order book depth.**

## Ws information
- url: [wss://futuresws.xxx.xxx/kline-api/ws](wss://futuresws.xxx.xxx/kline-api/ws)
- The returned data will be binary compressed except the heartbeat data (the user needs to decompress through Gzip algorithm)

## Demo
[https://github.com/exchange2021/openapidemo/blob/master/src/main/java/com/ws/WsTest.java](https://github.com/exchange2021/openapidemo/blob/master/src/main/java/com/ws/WsTest.java)

#### Command Format

| event   | channel                       | description |
|---------|-------------------------------|------|
| `sub`   | `market_$symbol_depth_step0`  | `Subscribe depth`  |
| `unsub` | `market_$symbol_depth_step0`  | `Unsubscribe depth`  |
| `sub`   | `market_$symbol_trade_ticker` | `Subscribe to real-time trade`    |
| `unsub` | `market_$symbol_trade_ticker` | `Unsubscribe real-time trade`    |
| `sub`   | `market_$symbol_ticker`       | `Subscribe to 24h market data`    |
| `unsub` | `market_$symbol_ticker`       | `Unsubscribe 24h market data`    |
| `sub` | `market_$symbol_kline_1min`   | `Subscribe to 1min k-line information`    |
| `req` | `market_$symbol_kline_1month`        | `Request 1 month historical bar record`    |

Heartbeat
Every once in a while, the server will send a PING message. The client needs to reply to the PONG message, otherwise the server will close the connection.

```json
{
    "ping": 1535975085052
}
```

```json
  {
  "pong": 15359750
  }
```
## Subscription Full Depth

- Subscription message structure
```json
  {
  "event":"sub",
  "params":{
    "channel":"market_$symbol_depth_step0", // $symbol E.g. btcusdt
    "cb_id":"1" // Business ID is not required
    }
  }
```
- Payload

```json
{
    "channel":"market_btcusdt_depth_step0",
    "ts":1506584998239,
    "tick":{//A maximum of 30 orders are returned
        "asks":[ //asks
            [10000.19,0.93],
            [10001.21,0.2],
            [10002.22,0.34]
        ],
        "buys":[ //buy
            [9999.53,0.93],
            [9998.2,0.2],
            [9997.19,0.21]
        ]
    }
}
```
## Subscription Real Time Trade
- Subscription message structure

```json
{
    "event":"sub",
    "params":{
        "channel":"market_$symbol_trade_ticker", // $symbol:e_btcusdt
        "cb_id":"1" // // Business ID is not required
    }
}
```

- Payload

```json
{
    "channel":"market_$symbol_trade_ticker",
    "ts":1506584998239,//request time
    "tick":{
        "id":12121,//data max id
        "ts":1506584998239,//data mx time
        "data":[
            {
                "side":"buy",//buy,sell
                "price":32.233,
                "vol":232,
                "amount":323,
                "ds":"2017-09-10 23:12:21"
            }
        ]
    }
}
```

## Subscription Kline Market
- Subscription message structure

```json
{
    "event":"sub",
    "params":{
        "channel":"market_$symbol_kline_[1min/5min/15min/30min/60min/1day/1week/1month]", // $symbol E.g. e_btcusdt
        "cb_id":"1" // // Business ID is not required
    }
}
```

- Payload

```json
{
    "channel":"market_$symbol_kline_1min", //1min is for 1 minute
    "ts":1506584998239,//request time
    "tick":{
        "id":1506602880,//kline start time
        "vol":1212.12211,
        "open":2233.22,//open price
        "close":1221.11,//close price
        "high":22322.22,//high price
        "low":2321.22 //low price
    }
}
```

## Subscription Market Tickers

- Subscription message structure

```json
{
    "event":"sub",
    "params":{
        "channel":"market_$symbol_ticker", // $symbol E.g. e_btcusdt
        "cb_id":"1" // // Business ID is not required
    }
}
```
- Payload

```json
{
    "channel":"market_$symbol_ticker",
    "ts":1506584998239,//request time
    "tick":{
        "amount":123.1221,
        "vol":1212.12211,
        "open":2233.22,//open price
        "close":1221.11,//close price
        "high":22322.22,//high price
        "low":2321.22,//low price
        "rose":-0.2922,//increase
    }
}
```

## Request Kline History Data

- Subscription message structure

```json
{
    "event":"req",
    "params":{
        "channel":"market_$symbol_kline_[1min/5min/15min/30min/60min/1day/1week/1month]",
        "cb_id":"1",
        "endIdx":"1506602880", //Return pageSize data before endIdx Not required
        "pageSize":100 // Not required
    }
}
```

- Payload

```json
{
    "event_rep":"rep","channel":"market_$symbol_kline_5min","cb_id":"",
    "ts":1506584998239,//request time
  "data":[ //up to 300
        {
            "id":1506602880,//kline start time
            "amount":123.1221,
            "vol":1212.12211,
            "open":2233.22,//open price
            "close":1221.11,//close price
            "high":22322.22,//high price
            "low":2321.22 //low price
        },
        {
            "id":1506602880,//kline start time
            "amount":123.1221,
            "vol":1212.12211,
            "open":2233.22,//open price
            "close":1221.11,//close price
            "high":22322.22,//high price
            "low":2321.22 //low price
        }
    ]
}
```

## Request History Trade

- Subscription message structure

```json
{
    "event":"req",
    "params":{
        "channel":"market_$symbol_trade_ticker", // $symbol E.g.e_btcusdt
        "cb_id":"1" // // Business ID is not required
    }
}
```

- Payload

```json
{
    "event_rep":"rep","channel":"market_$symbol_trade_ticker",
    "cb_id":"",
    "ts":1506584998239,"status":"ok",
    "data":[
        {
            "side":"buy",//buy,sell
            "price":32.233,//trade price
            "vol":232,//trade vol
            "amount":323 //trade amount
        },
        {
            "side":"buy",// buy,sell
            "price":32.233,//trade price
            "vol":232,//trade vol
            "amount":323 //trade amount
        }
    ]
}
```

# error code
Error code explanation


The returned error report generally consists of two parts: error code and error message. The error codes are universal, but the error messages will vary. The following is an example of an error JSON Payload:


```json
{
  "code":-1121,
  "msg":"Invalid symbol."
}
```


## 10xx - General server and network errors


### -1000 UNKNOWN
- An unknown error occurred while processing the request


### -1001 DISCONNECTED
- Internal error, unable to process your request, please try again


### 1002 UNAUTHORIZED
- You do not have permission to perform this request. The request requires sending an API key. We recommend appending the API key to all request headers.


### -1003 TOO_MANY_REQUESTS
- The request is too frequent and exceeds the limit.


### -1006 UNEXPECTED_RESP
- A message that does not conform to the preset format was received and the order status is unknown.


### -1007 TIMEOUT
- Timeout waiting for backend server response. The sending status is unknown; the execution status is unknown


### -1014 UNKNOWN_ORDER_COMPOSITION
- Unsupported order combination


### -1015 TOO_MANY_ORDERS
- There are too many new orders. Please reduce the frequency of your requests


### -1016 SERVICE_SHUTTING_DOWN
- Server offline


### -1017 ILLEGAL_CONTENT_TYPE
- We recommend appending Content-Type to all request headers and setting it to application/json


### -1020 UNSUPPORTED_OPERATION
- This operation is not supported


### 1021 INVALID_TIMESTAMP
- The delay is too large, and the server determines that the time taken has exceeded the recevWindow based on the timestamp in the received request. Please improve the network conditions or increase the recevWindow.
- The time offset is too large. The server determines that the client time is more than 1 second ahead of the server time based on the timestamp in the request.


### -1022 INVALID_SIGNATURE
- The signature for this request is invalid.


### -1023 UNTIMESTAMP
- You do not have permission to perform this request, we recommend that you append X-CH-TS to all request headers


### -1024 UNSIGNATURE
- You do not have permission to perform this request. We recommend that you append X-CH-SIGN to the request header.


## 11xx - Issues in request content


### -1100 ILLEGAL_CHARS
- Illegal characters found in parameter.


### -1101 TOO_MANY_PARAMETERS
- Too many parameters were sent.
- Duplicate parameter value detected


### -1102 MANDATORY_PARAM_EMPTY_OR_MALFORMED
- Mandatory parameter was not sent, was null/null or was malformed.
- Mandatory parameter '%s' was not sent, empty/null or malformed.
- Parameter '%s' or '%s' must be sent, but both are empty!


### -1103 UNKNOWN_PARAM
- Unknown parameters were sent.
- Each request requires at least one parameter {Timestamp}.


### -1104 UNREAD_PARAMETERS

# Official SDK

## Example of Signature

```java
/**
 * Generate sign
 **/
private String toSign(String timestamp, String method, String requestPath,
                             String queryString, String body, String secretKey) throws Exception {

    String preHash = preHash(timestamp, method, requestPath, queryString, body);
    byte[] secretKeyBytes = secretKey.getBytes("UTF-8");
    SecretKeySpec secretKeySpec = new SecretKeySpec(secretKeyBytes, "HmacSHA256");
    Mac mac = (Mac) MAC.clone();
    mac.init(secretKeySpec);
    return Hex.encodeHexString(mac.doFinal(preHash.getBytes("UTF-8")));
}

/**
 * signature string
 **/
private String preHash(String timestamp, String method, String requestPath, String queryString, String body) {

    StringBuilder preHash = new StringBuilder();
    preHash.append(timestamp);
    preHash.append(method.toUpperCase());
    preHash.append(requestPath);
    if (org.apache.commons.lang3.StringUtils.isNotEmpty(queryString)) {
        preHash.append("?").append(queryString);
    }
    if (org.apache.commons.lang3.StringUtils.isNotEmpty(body)) {
        preHash.append(body);
    }
    return preHash.toString();
}

/**
 * queryString
 **/
private String queryString(ServerHttpRequest request) {
    String url = request.getURI().toString();
    String queryString = "";
    if (url.contains("?")) {
        queryString = url.substring(url.lastIndexOf("?") + 1);
    }
    return queryString;
}
```
#### Example of how to create order

- java

```java
OkHttpClient client = new OkHttpClient().newBuilder()
.build();
MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\"symbol\":\"BTCUSDT\",\"volume\":1,\"side\":\"BUY\",\"type\":\"LIMIT\",\"price\":10000,\"newClientOrderId\":\"\",\"recvWindow\":5000}");
Request request = new Request.Builder()
.url("https://openapi.xxx.com")
.method("POST", body)
.addHeader("X-CH-APIKEY", "Your API key")
.addHeader("X-CH-TS", "1596543296058")
.addHeader("Content-Type", "application/json")
.addHeader("X-CH-SIGN", "encrypt sign")
.build();
Response response = client.newCall(request).execute();
```
- go


```
package main
import (
"fmt"
"strings"
"net/http"
"io/ioutil"
)
func main() {
  url := "https://openapi.xxx.com"
  method := "POST"
  payload := strings.NewReader("{\"symbol\":\"BTCUSDT\",\"volume\":1,\"side\":\"BUY\",\"type\":\"LIMIT\",\"price\":10000,\"newClientOrderId\":\"\",\"recvWindow\":5000}")
  client := &http.Client {
}
  req, err := http.NewRequest(method, url, payload)
if err != nil {
    fmt.Println(err)
}
  req.Header.Add("X-CH-APIKEY", "Your API key")
  req.Header.Add("X-CH-TS", "1596543881257")
  req.Header.Add("Content-Type", "application/json")
  req.Header.Add("X-CH-SIGN", "encrypt sign")
  res, err := client.Do(req)
  defer res.Body.Close()
  body, err := ioutil.ReadAll(res.Body)
  fmt.Println(string(body))
}
```

- Python

```
import requests
url = "https://openapi.xxx.com"
payload = "{\"symbol\":\"BTCUSDT\",\"volume\":1,\"side\":\"BUY\",\"type\":\"LIMIT\",\"price\":10000,\"newClientOrderId\":\"\",\"recvWindow\":5000}"
headers = {
'X-CH-APIKEY': 'Your API key',
'X-CH-TS': '1596543881257',
'Content-Type': 'application/json',
'X-CH-SIGN': 'encrypt sign'
}
response = requests.request("POST", url, headers=headers, data = payload)
print(response.text.encode('utf8'))
```
- php

```
<?php
require_once 'HTTP/Request2.php';
$request = new HTTP_Request2();
$request->setUrl('https://openapi.xxx.com');
$request->setMethod(HTTP_Request2::METHOD_POST);
$request->setConfig(array(
'follow_redirects' => TRUE
));
$request->setHeader(array(
'X-CH-APIKEY' => 'Your API key',
'X-CH-TS' => '1596543881257',
'Content-Type' => 'application/json',
'X-CH-SIGN' => 'encrypt sign'
));
$request->setBody('{"symbol":"BTCUSDT","volume":1,"side":"BUY","type":"LIMIT","price":10000,"newClientOrderId":"","recvWindow":5000}');
try {
  $response = $request->send();
if ($response->getStatus() == 200) {
    echo $response->getBody();
}
else {
    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .
    $response->getReasonPhrase();
}
}
catch(HTTP_Request2_Exception $e) {
  echo 'Error: ' . $e->getMessage();
```

- nodeJs

```javascript
var request = require('request');
var options = {
'method': 'POST',
'url': 'https://openapi.xxx.com',
'headers': {
'X-CH-APIKEY': 'Your API key',
'X-CH-TS': '1596543881257',
'Content-Type': 'application/json',
'X-CH-SIGN': 'encrypt sign'
},
  body: JSON.stringify({"symbol":"BTCUSDT","volume":1,"side":"BUY","type":"LIMIT","price":10000,"newClientOrderId":"","recvWindow":5000})
};
request(options, function (error, response) {
if (error) throw new Error(error);
  console.log(response.body);
});

```

# Common Problem

### What is the maximum difference between the timestamp parameter of the request interface and the arrival time of the server?
When the server receives the request, it will judge the timestamp in the request. If it is sent before 5000 milliseconds, the request will be considered invalid. This time window value can be customized by sending the optional parameter recvWindow.
### The request header "X-CH-TS" cannot be empty. How to solve it?
First, it is recommended that the user print out the X-CH-TS, and check whether the X-CH-TS is empty when there is an exception, and it is recommended that the user code is optimized, and judge whether the X-CH-TS is empty before each request.
### Why does authentication always return invalid signatures?
You can print out the request header information and the string before signature, with the following points:：
- Compare your request header with the following request header example one by one
- Is the API-key configured correctly in the program
- Whether the string before signing conforms to the standard format, the order of all elements must be consistent. You can copy the following example to compare with your string before signing:

>Example request header:Content-Type: application/json X-CH-APIKEY: 44c541a1-****-****-****-10fe390df2 X-CH-SIGN: ssseLeefrffraoEQ3yI9qEtI1CZ82ikZ4xSG5Kj8gnl3uw= X-CH-TS: 1574327555669> POST示例：1588591856950POST/sapi/v1/order/test{"symbol":"BTCUSDT","price":"9300","volume":"1","side":"BUY","type":"LIMIT"}

### The calling interface prompts ILLEGAL_CONTENT_TYPE (-1017). What is the reason?
We recommend attaching Content-Type to all request headers and setting it to application/json

### Is there a limit to the frequency of API calls per second?
There are restrictions. For details, see the access frequency restrictions for each interface in the document.

### What is the limit on API access frequency？
Personal data is restricted according to API-key, and public data is restricted according to ip. It should be noted that if the user requests public data and passes in valid personal information, it is restricted according to API-key.

### What is the cause of HTTP status code 429?
The request interface exceeds the access frequency limit. It is recommended to reduce the access frequency.

### Will the IP be blocked if the API call interface reports that the access frequency is exceeded? How long is it sealed?
Normally not, just reduce the frequency of access.

### Why is WebSocker disconnected?
- Without adding a heartbeat, the WebSocket connection requires the client to return to pong to ensure the stability of the connection.
- The pong message sent by the client is caused by network reasons, but the server does not receive it, or other network reasons may also cause automatic disconnection.
- It is recommended that users have a good WebSocket disconnect and reconnect mechanism to ensure that the program can automatically reconnect when the heartbeat (ping/pong) connection is accidentally disconnected.

### The user request interface reports an error Time Out?
The network cannot connect to the server. It is recommended that you check whether the network is smooth.

### What is clientOrderId and what does it do?
- clientOrderId is your customized order number, which can be used to identify your order. After the order is placed, you can make clientOrderId call the "Order Information" interface to view the order status;
- The user needs to ensure that this ID is not repeated, and we will not prompt for re-relocation. If there is a repetition, you can only cancel or query the latest piece of data when canceling and querying the order

### How to get the latest transaction price?
You can get ticker information, last is the latest transaction price

### Will there be a negative growth in the 24-hour trading volume in the ticker interface?
Will do. Because the 24-hour trading volume is a 24-hour rolling data (the size of the translation window is 24 hours), it may happen that the accumulated trading volume and accumulated trading volume in the next window are smaller than the previous window.
